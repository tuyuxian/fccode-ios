directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Citizen implements Node {
  id: ID!
  countryName: String!
  code: String!
  citizenOwner: User
}
"""
CreateCitizenInput is used for create Citizen object.
Input was generated by ent.
"""
input CreateCitizenInput {
  countryName: String!
  code: String!
  citizenOwnerID: ID
}
"""
CreateEthnicityInput is used for create Ethnicity object.
Input was generated by ent.
"""
input CreateEthnicityInput {
  ethnicityType: EthnicityEthnicityType!
  ethnicityOwnerID: ID
}
"""
CreateGoalInput is used for create Goal object.
Input was generated by ent.
"""
input CreateGoalInput {
  goalType: GoalGoalType!
  goalOwnerID: ID
}
"""
CreateLifePhotoInput is used for create LifePhoto object.
Input was generated by ent.
"""
input CreateLifePhotoInput {
  contentURL: String!
  caption: String
  position: Int!
  scale: Float!
  offsetX: Float!
  offsetY: Float!
  lifePhotoOwnerID: ID
}
"""
CreateSocialAccountInput is used for create SocialAccount object.
Input was generated by ent.
"""
input CreateSocialAccountInput {
  email: String!
  platform: SocialAccountPlatform!
  socialAccountOwnerID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  createdAt: Time
  updatedAt: Time
  email: String!
  password: String
  username: String!
  firstName: String
  lastName: String
  dateOfBirth: Time!
  gender: UserGender!
  profilePictureURL: String
  voiceContentURL: String
  selfIntro: String
  longitude: Float!
  latitude: Float!
  country: String
  administrativeArea: String
  googleConnect: Boolean
  facebookConnect: Boolean
  appleConnect: Boolean
  premium: Boolean
  citizenIDs: [ID!]
  goalIDs: [ID!]
  matchIDs: [ID!]
  likedByIDs: [ID!]
  likeIDs: [ID!]
  ethnicityIDs: [ID!]
  socialAccountIDs: [ID!]
  lifePhotoIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Ethnicity implements Node {
  id: ID!
  ethnicityType: EthnicityEthnicityType!
  ethnicityOwner: User
}
"""EthnicityEthnicityType is enum for the field ethnicity_type"""
enum EthnicityEthnicityType @goModel(model: "user_service/internal/ent/ethnicity.EthnicityType") {
  ET1
  ET2
  ET3
  ET4
  ET5
  ET6
  ET7
  ET8
  ET9
}
type Goal implements Node {
  id: ID!
  goalType: GoalGoalType!
  goalOwner: User
}
"""GoalGoalType is enum for the field goal_type"""
enum GoalGoalType @goModel(model: "user_service/internal/ent/goal.GoalType") {
  GT1
  GT2
  GT3
  GT4
}
type LifePhoto implements Node {
  id: ID!
  contentURL: String!
  caption: String
  position: Int!
  scale: Float!
  offsetX: Float!
  offsetY: Float!
  lifePhotoOwner: User
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "user_service/internal/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  citizens: [Citizen!]!
  ethnicities: [Ethnicity!]!
  goals: [Goal!]!
  lifePhotos: [LifePhoto!]!
  socialAccounts: [SocialAccount!]!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder
  ): UserConnection!
}
type SocialAccount implements Node {
  id: ID!
  email: String!
  platform: SocialAccountPlatform!
  socialAccountOwner: User
}
"""Ordering options for SocialAccount connections"""
input SocialAccountOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order SocialAccounts."""
  field: SocialAccountOrderField!
}
"""Properties by which SocialAccount connections can be ordered."""
enum SocialAccountOrderField {
  EMAIL
}
"""SocialAccountPlatform is enum for the field platform"""
enum SocialAccountPlatform @goModel(model: "user_service/internal/ent/socialaccount.Platform") {
  FINGERCROSSED
  GOOGLE
  FACEBOOK
  APPLE
}
"""The builtin Time type"""
scalar Time
"""
UpdateCitizenInput is used for update Citizen object.
Input was generated by ent.
"""
input UpdateCitizenInput {
  countryName: String
  code: String
  citizenOwnerID: ID
  clearCitizenOwner: Boolean
}
"""
UpdateEthnicityInput is used for update Ethnicity object.
Input was generated by ent.
"""
input UpdateEthnicityInput {
  ethnicityType: EthnicityEthnicityType
  ethnicityOwnerID: ID
  clearEthnicityOwner: Boolean
}
"""
UpdateGoalInput is used for update Goal object.
Input was generated by ent.
"""
input UpdateGoalInput {
  goalType: GoalGoalType
  goalOwnerID: ID
  clearGoalOwner: Boolean
}
"""
UpdateLifePhotoInput is used for update LifePhoto object.
Input was generated by ent.
"""
input UpdateLifePhotoInput {
  contentURL: String
  caption: String
  clearCaption: Boolean
  position: Int
  scale: Float
  offsetX: Float
  offsetY: Float
  lifePhotoOwnerID: ID
  clearLifePhotoOwner: Boolean
}
"""
UpdateSocialAccountInput is used for update SocialAccount object.
Input was generated by ent.
"""
input UpdateSocialAccountInput {
  email: String
  platform: SocialAccountPlatform
  socialAccountOwnerID: ID
  clearSocialAccountOwner: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  updatedAt: Time
  email: String
  password: String
  clearPassword: Boolean
  username: String
  firstName: String
  clearFirstName: Boolean
  lastName: String
  clearLastName: Boolean
  dateOfBirth: Time
  gender: UserGender
  profilePictureURL: String
  clearProfilePictureURL: Boolean
  voiceContentURL: String
  clearVoiceContentURL: Boolean
  selfIntro: String
  clearSelfIntro: Boolean
  longitude: Float
  latitude: Float
  country: String
  clearCountry: Boolean
  administrativeArea: String
  clearAdministrativeArea: Boolean
  googleConnect: Boolean
  facebookConnect: Boolean
  appleConnect: Boolean
  premium: Boolean
  addCitizenIDs: [ID!]
  removeCitizenIDs: [ID!]
  clearCitizen: Boolean
  addGoalIDs: [ID!]
  removeGoalIDs: [ID!]
  clearGoal: Boolean
  addMatchIDs: [ID!]
  removeMatchIDs: [ID!]
  clearMatch: Boolean
  addLikedByIDs: [ID!]
  removeLikedByIDs: [ID!]
  clearLikedBy: Boolean
  addLikeIDs: [ID!]
  removeLikeIDs: [ID!]
  clearLike: Boolean
  addEthnicityIDs: [ID!]
  removeEthnicityIDs: [ID!]
  clearEthnicity: Boolean
  addSocialAccountIDs: [ID!]
  removeSocialAccountIDs: [ID!]
  clearSocialAccount: Boolean
  addLifePhotoIDs: [ID!]
  removeLifePhotoIDs: [ID!]
  clearLifePhoto: Boolean
}
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  email: String!
  password: String
  username: String!
  firstName: String
  lastName: String
  dateOfBirth: Time!
  gender: UserGender!
  profilePictureURL: String
  voiceContentURL: String
  selfIntro: String
  longitude: Float!
  latitude: Float!
  country: String
  administrativeArea: String
  googleConnect: Boolean!
  facebookConnect: Boolean!
  appleConnect: Boolean!
  premium: Boolean!
  citizen: [Citizen!]
  goal: [Goal!]
  match: [User!]
  likedBy: [User!]
  like: [User!]
  ethnicity: [Ethnicity!]
  socialAccount: [SocialAccount!]
  lifePhoto: [LifePhoto!]
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""UserGender is enum for the field gender"""
enum UserGender @goModel(model: "user_service/internal/ent/user.Gender") {
  MALE
  FEMALE
  TRANSGENDER
  NON_BINARY
  PREFER_NOT_TO_SAY
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  EMAIL
  USERNAME
  DATE_OF_BIRTH
}
